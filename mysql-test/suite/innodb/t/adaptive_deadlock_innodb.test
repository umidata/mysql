-- source include/have_innodb.inc

--disable_warnings
drop table if exists lockt;
--enable_warnings

create table lockt(i int primary key) engine=innodb;
insert into lockt values (1), (2);

connect (con1,localhost,root,,);
connect (con2,localhost,root,,);

connection con1;
SET @start_max_deadlock_detection_steps = @@global.innodb_max_deadlock_detection_steps;
SELECT @@global.innodb_max_deadlock_detection_steps;
SET @start_innodb_deadlock_detect = @@global.innodb_deadlock_detect;
SELECT @@global.innodb_deadlock_detect;
set global innodb_deadlock_detect=1;
set global innodb_max_deadlock_detection_steps=1;
SELECT @@global.innodb_max_deadlock_detection_steps;

--echo
--echo Deadlock Detection bailed out early
--echo

let $d1=query_get_value(SHOW STATUS like "Innodb_row_lock_wait_timeouts", Value, 1);
let $d11=query_get_value(select count as Value from information_schema.innodb_metrics where name = 'lock_deadlocks_too_many_steps', Value, 1);

connection con1;
begin;
select * from lockt where i=1 for update;

connection con2;
begin;
select * from lockt where i=2 for update;
send select * from lockt where i=1 for update;

connection con1;
--error ER_LOCK_WAIT_TIMEOUT
select * from lockt where i=2 for update;
rollback;

connection con2;
--error ER_LOCK_WAIT_TIMEOUT
reap;
rollback;

let $d2=query_get_value(SHOW STATUS like "Innodb_row_lock_wait_timeouts", Value, 1);
let $d22=query_get_value(select count as Value from information_schema.innodb_metrics where name = 'lock_deadlocks_too_many_steps', Value, 1);

--disable_query_log
eval select $d2 - $d1 as lock_time_outs, 'must be 2';
eval select $d22 - $d11 as deadlocks_too_many_steps, 'must be 2';
--enable_query_log

--echo
--echo Deadlock detection triggered
--echo

set global innodb_max_deadlock_detection_steps=2;

let $d1=query_get_value(SHOW STATUS like "Innodb_row_lock_deadlocks", Value, 1);

connection con1;
begin;
select * from lockt where i=1 for update;

connection con2;
begin;
select * from lockt where i=2 for update;
send select * from lockt where i=1 for update;

connection con1;
sleep 0.5;
--error ER_LOCK_DEADLOCK
select * from lockt where i=2 for update;
rollback;

connection con2;
reap;
rollback;

let $d2=query_get_value(SHOW STATUS like "Innodb_row_lock_deadlocks", Value, 1);

--disable_query_log
eval select $d2 - $d1 as N_deadlocks, 'must be 1';
--enable_query_log

--echo
--echo Deadlock detection triggered when max_deadlock_detection_steps = 0
--echo

set global innodb_max_deadlock_detection_steps=0;

let $d1=query_get_value(SHOW STATUS like "Innodb_row_lock_deadlocks", Value, 1);

connection con1;
begin;
select * from lockt where i=1 for update;

connection con2;
begin;
select * from lockt where i=2 for update;
send select * from lockt where i=1 for update;

connection con1;
sleep 0.5;
--error ER_LOCK_DEADLOCK
select * from lockt where i=2 for update;
rollback;

connection con2;
reap;
rollback;

let $d2=query_get_value(SHOW STATUS like "Innodb_row_lock_deadlocks", Value, 1);

--disable_query_log
eval select $d2 - $d1 as N_deadlocks, 'must be 1';
--enable_query_log


--echo
--echo Cleanup
--echo
connection con1;
SET @@global.innodb_max_deadlock_detection_steps = @start_max_deadlock_detection_steps;
SELECT @@global.innodb_max_deadlock_detection_steps;
SET @@global.innodb_deadlock_detect = @start_innodb_deadlock_detect;
SELECT @@global.innodb_deadlock_detect;

drop table lockt;
